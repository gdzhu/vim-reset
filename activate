#!/usr/bin/env bash

# add $1 as the first directory of PATH environment variable
add_to_path() {
    local path=$1
    local -a path_array
    while read d
    do
        if [[ ${path} != ${d} ]]
        then
            path_array=( $( echo ${path_array[*]} ) $d )
        fi
    done<<<$( echo $PATH |tr ':' ' ' )
    export PATH=${path}:$( IFS=":"; echo "${path_array[*]}" )
}

# delete $1 from PATH environment variable
del_from_path() {
    local path=$1
    local -a path_array
    while read d
    do
        if [[ ${path} != ${d} ]]
        then
            path_array=( $( echo ${path_array[*]} ) $d )
        fi
    done<<<$( echo $PATH |tr ':' ' ' )
    export PATH=$( IFS=":"; echo "${path_array[*]}" )
}

# check if vim-reset is already working now
check_vim_reset() {
    add_to_path "${VIMCONFIG_DIR}/bin"
    grep -IF 'GENERATED_BY_VIM_RESET' "$( which vim )" &>/dev/null
}

if [[ -z ${VIMCONFIG_DIR} ]]
then
    # this is a common one-liner copied from
    # http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in
    SCRIPT_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
    VIMCONFIG_DIR=${SCRIPT_DIR}/vimconfig
    echo "You didn't specify VIMCONFIG_DIR environment, default using ${VIMCONFIG_DIR}" >&2
else
    echo "Using ${VIMCONFIG_DIR}" >&2
fi

if check_vim_reset
then
    return
fi

if [[ ! -d ${VIMCONFIG_DIR} ]]
then
    echo "Creating ${VIMCONFIG_DIR}" >&2
    mkdir -p "${VIMCONFIG_DIR}"
fi

del_from_path "${VIMCONFIG_DIR}/bin"

TEMP=$( mktemp )
VIM=$( which vim )

${VIM} -c "redir! > $TEMP" -c 'set runtimepath' -c 'q'

OLD_RUNTIMEPATH=$( tail -n1 $TEMP | awk -F= '{print $2}' | cut -d, -f2- )

RUNTIMEPATH=${VIMCONFIG_DIR},${OLD_RUNTIMEPATH}
VIMRC=${VIMCONFIG_DIR}/_vimrc

if [[ ! -d ${VIMCONFIG_DIR}/bin ]]
then
    mkdir "${VIMCONFIG_DIR}/bin"
fi

if [[ ! -f ${VIMCONFIG_DIR}/bin/vim ]]
then
    cat > "${VIMCONFIG_DIR}/bin/vim" <<OUTPUT
#!/usr/bin/env bash
# GENERATED_BY_VIM_RESET
# don't delete the line above

${VIM} --cmd 'set runtimepath=${RUNTIMEPATH}' -u '${VIMRC}' \$@
OUTPUT
    chmod +x "${VIMCONFIG_DIR}/bin/vim"
fi

add_to_path "${VIMCONFIG_DIR}/bin"

echo "========================"
echo "VIMRC=${VIMRC}"
echo "VIMRUNTIME=${RUNTIMEPATH}"
echo "========================"

if [[ ! -f ${VIMRC} ]]
then
    echo
    echo "WARNING: ${VIMRC} doesn't exist, please remember to create it or copy your current ~/.vimrc file" >&2
    echo
fi
